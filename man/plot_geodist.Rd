% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_geodist.R
\name{plot_geodist}
\alias{plot_geodist}
\title{Plot euclidean nearest neighbor distances in geographic space}
\usage{
plot_geodist(
  x,
  modeldomain,
  samplesize = 2000,
  cvfolds = NULL,
  testdata = NULL,
  scale = TRUE,
  distance = "geo"
)
}
\arguments{
\item{x}{object of class sf, training data locations}

\item{modeldomain}{sf or raster object defining the prediction area (see Details)}

\item{samplesize}{numeric. How many random prediction samples should be used? Only required if modeldomain is a raster (see Details)}

\item{cvfolds}{optional. List of row indices of x that are held back in each CV iteration. See e.g. ?createFolds or ?createSpaceTimeFolds}

\item{testdata}{optional. object of class sf: Data used for independent validation}

\item{scale}{logical. Present distances on log scale?}

\item{distance}{"geo" or "feature". Should the distance be computed in geographic space or in the multivariate predictor space (see Details)}
}
\value{
A plot and a data.frame containing the spatial/feature distances
}
\description{
Density plot of geographic nearest neighbor distances between training data as well as between training data and prediction locations.
Optional, the nearest neighbor distances between training data and test data or between training data and CV iterations is shown.
The plot can be used to check the suitability of a chosen CV method to be representative to estimate map accuracy. Alternatively distances can also be calculated in the multivariate feature space.
}
\details{
The modeldomain is a set of spatial points (sf points) that represent a sample of the prediction locations. If a raster is provided as modeldomain, the function takes a regular point sample (amount defined by samplesize) from the raster extent.
    If distance = "feature", the arguments x, modeldomain and testdata have to include predictors. In this case, if you provide a raster as the model domain, the regular sample also  extracts the values from the raster layers.
}
\examples{
\dontrun{
library(sf)
library(raster)
library(caret)
########### prepare sample data:
dat <- get(load(system.file("extdata","Cookfarm.RData",package="CAST")))
dat <- aggregate(dat[,c("DEM","TWI", "NDRE.M", "NDRE.Sd", "Bt", "Easting", "Northing")],by=list(as#' .character(dat$SOURCEID)),mean)
pts <- dat[,-1]
pts <- st_as_sf(pts,coords=c("Easting","Northing"))
st_crs(pts) <- 26911
pts_train <- pts[1:29,]
pts_test <- pts[30:42,]
studyArea <- raster::stack(system.file("extdata","predictors_2012-03-25.grd",package="CAST"))
studyArea = studyArea[[c("DEM","TWI", "NDRE.M", "NDRE.Sd", "Bt")]]
########### Distance between training data and new data:
dist <- plot_geodist(pts_train,studyArea)
########### Distance between training data, new data and test data:
mapview(pts_train,col.regions="blue")+mapview(pts_test,col.regions="red")
dist <- plot_geodist(pts_train,studyArea,testdata=pts_test)
########### Distance between training data, new data and CV folds:
folds <- createFolds(1:nrow(pts_train),k=3,returnTrain=FALSE)
plot_geodist(x=pts_train, modeldomain=studyArea, cvfolds=folds)

# with feature space distance
plot_geodist(x=pts_train, modeldomain=studyArea, distance = "feature")
plot_geodist(x=pts_train, modeldomain=studyArea, cvfolds = folds, testdata = pts_test,distance = "feature")
}




}
\author{
Hanna Meyer, Edzer Pebesma, Marvin Ludwig
}
